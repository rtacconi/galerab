#!/usr/bin/env ruby

require 'galerab'

path = ARGV.include?('-c') && ARGV[ARGV.index('-c') + 1]

unless path
  path = ENV['GALERAB_CONFIG_PATH']
  
  unless path
    puts "Missing path for configuration file"
    puts "Usage: command -c path/file.yml"
    abort
  end
end


puts "[#{Process.pid}] galerab starting with config file at #{ARGV[1]}"
configuration = Configuration.new(path)
conf = configuration.conf
backend = Backend.new(conf)

balancer = fork { BalancingProxy::Server.run(backend) }

checker = fork do
  while true
    # Here we check if the backend is ready
    next_backend = backend.get_next
    puts "\nChecking if (wsrep_ready == ON) #{next_backend}\n"
    
    if next_backend
      begin
        connection = Sequel.connect(
          "mysql://#{conf["user"]}:#{conf["password"]}@#{next_backend}/#{conf["database"]}"
        ).fetch("show status like 'wsrep_ready'") do |row|

          if row[:Value] == "OFF"
            puts "#{next_backend} is not ready"
            configuration.remove_backend(next_backend)
            Process.kill(:SIGHUP, balancer)
          elsif row[:Value] == "ON"
            puts "#{next_backend} is ready"
            configuration.add_backend(next_backend)
            Process.kill(:SIGHUP, balancer)
          end
        end
      rescue Exception => msg
        puts "#{next_backend} is not ready #{msg}"
        configuration.remove_backend(next_backend)
        Process.kill(:SIGHUP, balancer)
      end
    end
    
    sleep conf["check_every"]
  end
end

trap (:SIGHUP) do
  $stdout.puts "Received SIGHUP, reloading config file"
  backend.conf = YAML.load_file(ARGV[1])
  $stdout.puts backend.conf["balancer_ports"].inspect
end

Process.waitpid2(checker)
Process.waitpid2(balancer)
#connection = Sequel.connect("mysql://root:root@192.168.2.11/mysql").fetch("show status like 'wsrep_ready'") {puts row[:Value]}